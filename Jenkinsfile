// Jenkinsfile
pipeline {
    agent any // This tells Jenkins to run the pipeline on any available agent (your local machine in this case)

    tools {
        // Specify the Node.js installation we configured in Jenkins.
        // Make sure the name matches exactly what you put in Step 1.4 (e.g., 'Node 20.x')
        nodejs 'Node v22.16.0' // <--- REPLACE WITH YOUR CONFIGURED NODE.JS NAME
    }

    stages {
        stage('Checkout') {
            steps {
                // This step is often implicit when you configure the job to use SCM (Git).
                // Jenkins will automatically clone your repository into the workspace.
                echo 'Code checkout handled by SCM configuration.'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing Node.js dependencies...'
                sh 'npm install' // 'sh' command runs shell commands (works on Windows too, with Git Bash/WSL)
            }
        }

        stage('Build Application') {
            steps {
                echo 'Building Angular application...'
                sh 'npm run build -- --configuration=production'
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running Unit Tests with Jest...'
                // We need to configure Jest to output JUnit XML reports for Jenkins
                // First, ensure you have 'jest-junit' installed in your Angular project:
                // npm install --save-dev jest-junit
                //
                // Then, ensure your jest.config.ts has a 'reporters' array including 'default' and ['jest-junit', { outputDirectory: 'test-results', outputName: 'junit.xml' }]
                // Example jest.config.ts snippet:
                // reporters: ['default', ['jest-junit', { outputDirectory: 'test-results', outputName: 'junit.xml' }]],
                sh 'npm test -- --coverage' // Assuming 'npm test' runs Jest and it's configured for JUnit output
            }
        }

        stage('Publish Test Reports') {
            steps {
                echo 'Publishing test reports to Jenkins...'
                // This step tells Jenkins to parse the JUnit XML report generated by Jest
                junit 'test-results/junit.xml' // Adjust path if your Jest config outputs to a different folder/file
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Build successful!'
        }
        failure {
            echo 'Build failed. Check logs for details.'
        }
    }
}